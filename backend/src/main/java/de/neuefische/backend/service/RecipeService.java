package de.neuefische.backend.service;

import de.neuefische.backend.dto.RecipeDto;
import de.neuefische.backend.exceptions.RecipeNotFoundException;
import de.neuefische.backend.mapper.RecipeMapper;
import de.neuefische.backend.model.Recipe;
import de.neuefische.backend.repository.RecipeRepository;
import org.mapstruct.Mapper;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.Mapping;

import java.time.LocalDateTime;
import java.util.*;


@Service
public class RecipeService {
    private final RecipeRepository recipeRepo;
    private final RecipeMapper recipeMapper;
    private final AutoGeneratedValuesService autoGeneratedValuesService;

    public RecipeService(RecipeRepository recipeRepo, RecipeMapper recipeMapper, AutoGeneratedValuesService autoGeneratedValuesService) {
        this.recipeRepo = recipeRepo;
        this.recipeMapper = recipeMapper;
        this.autoGeneratedValuesService = autoGeneratedValuesService;
    }

    public List<Recipe> getAllRecipes() {
        return recipeRepo.findAll();
    }


    public Recipe addRecipe(RecipeDto recipeDto) {
        String id = autoGeneratedValuesService.generateRandomId();
        LocalDateTime createdAt = autoGeneratedValuesService.currentLocalDateTime();
        String category = autoGeneratedValuesService.getCategory();
        Recipe recipeToSave = recipeDto.createNewRecipe(id, createdAt, category);
        return recipeRepo.save(recipeToSave);
    }

    public Recipe getRecipeById(String id) {
        return recipeRepo
                .findById(id)
                .orElseThrow(() -> new RecipeNotFoundException("Recipe with the id: " + id + " not found!"));
    }

    public Recipe updateRecipeById(String id, RecipeDto updatedRecipeDto) {
        Recipe recipeToUpdate = getRecipeById(id);
        recipeMapper.updateRecipeFromDto(updatedRecipeDto, recipeToUpdate);
        return recipeRepo.save(recipeToUpdate);

    }
}

