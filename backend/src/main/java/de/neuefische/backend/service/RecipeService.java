package de.neuefische.backend.service;
import de.neuefische.backend.dto.RecipeDto;
import de.neuefische.backend.exceptions.RecipeNotFoundException;
import de.neuefische.backend.model.Recipe;
import de.neuefische.backend.repository.RecipeRepository;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.*;


@Service
public class RecipeService {
    private final RecipeRepository recipeRepo;
    private final AutoGeneratedValuesService autoGeneratedValuesService;

    public RecipeService(RecipeRepository recipeRepo, AutoGeneratedValuesService autoGeneratedValuesService) {
        this.recipeRepo = recipeRepo;
        this.autoGeneratedValuesService = autoGeneratedValuesService;
    }

    public List<Recipe> getAllRecipes() {
        return recipeRepo.findAll();
    }


    public Recipe addRecipe(RecipeDto recipeDto) {
        String id = autoGeneratedValuesService.generateRandomId();
        LocalDateTime createdAt = autoGeneratedValuesService.currentLocalDateTime();
        String category = autoGeneratedValuesService.getCategory();
        Recipe recipeToSave = recipeDto.createNewRecipe(id, createdAt, category);
        return recipeRepo.save(recipeToSave);
    }

    public Recipe getRecipeById(String id) {
        return recipeRepo
                .findById(id)
                .orElseThrow(() -> new RecipeNotFoundException("Recipe with the id: " + id + " not found!"));
    }

    public Recipe updateRecipeById(String id, RecipeDto updatedRecipeDto) {
        Recipe recipeToUpdate = getRecipeById(id);

        if (updatedRecipeDto.title() != null && !updatedRecipeDto.title().isEmpty()) {
            recipeToUpdate = recipeToUpdate.withTitle(updatedRecipeDto.title());
        }

        if (updatedRecipeDto.cookingTime() != 0) {
            recipeToUpdate = recipeToUpdate.withCookingTime(updatedRecipeDto.cookingTime());
        }

        recipeToUpdate = recipeToUpdate.withIngredients(updatedRecipeDto.ingredients());
        recipeToUpdate = recipeToUpdate.withRecipeText(updatedRecipeDto.recipeText());
        recipeToUpdate = recipeToUpdate.withImage(updatedRecipeDto.image());

        return recipeRepo.save(recipeToUpdate);

    }
}

