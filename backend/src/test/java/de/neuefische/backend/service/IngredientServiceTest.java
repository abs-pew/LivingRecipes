package de.neuefische.backend.service;

import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.client.AutoConfigureMockRestServiceServer;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

@SpringBootTest
@AutoConfigureMockMvc
@AutoConfigureMockRestServiceServer
class IngredientServiceTest {
@Autowired
    private MockMvc mockMvc;
@Autowired
private MockRestServiceServer mockRestServiceServer;

    @Test
    void sendGptRequest_shouldReturnStringMessage_whenCalled() throws Exception {
        String apiKey = "Test123";

        // Given
        mockRestServiceServer.expect(requestTo("https://api.openai.com/v1/chat/completions"))
                .andExpect(header("Authorization", "Bearer " + apiKey))
                .andExpect(method(HttpMethod.POST))
                .andExpect(content().json("""
                        {
                        "model":"gpt-4.1",
                        "messages": [
                              {
                                "role": "user",
                                "content": "To determine food category of a recipe, I need exactly one word as Vegan, Vegetarian,  Regular, or Unknown. The given ingredients are: Apple"                              }
                            ]
                        }
                        """
                ))
                .andRespond(withSuccess("""
                        {
                          "choices":
                          [
                          {
                                "index": "0",
                                "message": {
                                              "role": "assistant",
                                              "content": "Vegan"
                                            }
                                            }
                          ]
                        }
                        """

                        , MediaType.APPLICATION_JSON));

        String id = "ID001";
        String category = "Vegan";
     //   when(mockAutoGeneratedValuesService.getCategory(ingredientsStr)).thenReturn(category);
        //When & Then
        mockMvc.perform(MockMvcRequestBuilders.post("/api/recipes")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("""
                                  {
                                    "title": "Apple Moose",
                                    "cookingTime": 60,
                                    "ingredients": [
                                                      {
                                                        "name": "Apple",
                                                        "quantity": 600,
                                                        "unit": "GRAM"
                                                      }
                                                    ],
                                    "recipeText": "put all ingredients together in a pot and cook them well",                                                                   
                                    "image": "lentil_soup.jpg"
                                  }
                                """))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("""
                                {
                                    "title": "Apple Moose",
                                    "cookingTime": 60,
                                    "ingredients": [
                                                      {
                                                        "name": "Apple",
                                                        "quantity": 600,
                                                        "unit": "GRAM"
                                                      }
                                                    ],
                                    "recipeText": "put all ingredients together in a pot and cook them well",                                                                   
                                    "image": "lentil_soup.jpg"
                                  }
                                """)
                )
                .andExpect(MockMvcResultMatchers.jsonPath("$.id").isNotEmpty())
                .andExpect(MockMvcResultMatchers.jsonPath("$.createdAt").isNotEmpty())
                .andExpect(MockMvcResultMatchers.jsonPath("$.category").value(category))
        ;

//        String expected = "Vegan";
//        String actual = ingredientService.sendGptRequest("Apple");
//        assertEquals(expected, actual);
    } // sendGptRequest method
}