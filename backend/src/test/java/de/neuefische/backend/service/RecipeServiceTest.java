package de.neuefische.backend.service;


import de.neuefische.backend.dto.RecipeDto;
import de.neuefische.backend.exceptions.RecipeNotFoundException;
import de.neuefische.backend.mapper.RecipeMapper;
import de.neuefische.backend.model.Ingredient;
import de.neuefische.backend.model.Recipe;
import de.neuefische.backend.model.UnitsList;
import de.neuefische.backend.repository.RecipeRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RecipeServiceTest {

    @Mock
    private AutoGeneratedValuesService mockAutoGeneratedValuesService;

    @Mock
    private RecipeRepository mockRecipeRepo;

    @Mock
    private RecipeMapper mockRecipeMapper;

    @InjectMocks
    private RecipeService testRecipeService;

    @Test
    void getAllRecipes_shouldReturnAllRecipes() {
        //GIVEN
        Recipe testRecipe = new Recipe("001", "Butter Chicken", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "images link here",
                LocalDateTime.now(), "VEGAN");
        when(mockRecipeRepo.findAll()).thenReturn(Collections.singletonList(testRecipe));
        //WHEN
        List<Recipe> actual = testRecipeService.getAllRecipes();

        verify(mockRecipeRepo, times(1)).findAll();
        assertEquals(1, actual.size());
        assertEquals(testRecipe, actual.get(0));

    }

    @Test
    void generateRandomId_shouldGenerateRandomIdWithValue_ID001() {
        //GIVEN
        String testId = "ID001";
        when(mockAutoGeneratedValuesService.generateRandomId()).thenReturn(testId);
        //WHEN

        String actual = mockAutoGeneratedValuesService.generateRandomId();
        //THEN
        assertEquals(testId, actual);
    }

    @Test
    void addRecipe_shouldAddANewRecipe() {
        //GIVEN
        RecipeDto inputRecipe = new RecipeDto("Butter Chicken", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "images link here");


LocalDateTime currentDateTime = LocalDateTime.now();

        Recipe recipeToSave = inputRecipe.createNewRecipe("ID001",
                currentDateTime, "Regular");

        when(mockRecipeRepo.save(recipeToSave)).thenReturn(recipeToSave);
        when(mockAutoGeneratedValuesService.generateRandomId()).thenReturn("ID001");
        when(mockAutoGeneratedValuesService.currentLocalDateTime()).thenReturn(currentDateTime);
        when(mockAutoGeneratedValuesService.getCategory()).thenReturn("Regular");
        //WHEN
        Recipe actual = testRecipeService.addRecipe(inputRecipe);

        //THEN
        verify(mockAutoGeneratedValuesService).generateRandomId();
        verify(mockRecipeRepo, times(1)).save(recipeToSave);
        assertEquals(recipeToSave, actual);
    }

    @Test
    void getRecipeById_shouldReturnRecipe_whenCalledWithId_001() {
        //GIVEN
        String id = "ID001";
        Recipe testRecipe = new Recipe(id, "Butter Chicken", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "images link here",
                LocalDateTime.now(), "VEGAN");
        when(mockRecipeRepo.findById(id)).thenReturn(Optional.of(testRecipe));

        //WHEN
        Recipe actual = testRecipeService.getRecipeById(id);

        // THEN

        assertEquals(testRecipe, actual);
        verify(mockRecipeRepo, times(1)).findById(id);

    }
    @Test
    void getRecipeById_shouldReturnException_whenCalledWithInvalidId_ID005() {
        //GIVEN
        String id = "ID005";
        when(mockRecipeRepo.findById(id)).thenReturn(Optional.empty());
        //WHEN
        // THEN
        assertThrows(RecipeNotFoundException.class, () -> testRecipeService.getRecipeById(id));
        verify(mockRecipeRepo, times(1)).findById(id);

    }
//    @Test
//    void updateRecipeById_shouldReturnUpdatedRecipe_whenCalled() {
//
//        //GIVEN
//        String id = "ID001";
//        LocalDateTime createdAt = LocalDateTime.now();
//        String category = "Vegan";
//
//        Recipe recipeToUpdate = new Recipe(id, "Butter Chicken", 45,
//                List.of(
//                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
//                        new Ingredient("butter", 100, UnitsList.GRAM),
//                        new Ingredient("salt", 10, UnitsList.GRAM)),
//                "put all ingredients together in a pot and cook them well",
//                "images link here",
//                createdAt, category);;
//        when(mockRecipeRepo.findById(id)).thenReturn(Optional.of(recipeToUpdate));
//
//        RecipeDto updatedRecipeDto = new RecipeDto("Chicken65", 145,
//                List.of(
//                        new Ingredient("boneless chicken", 11000, UnitsList.GRAM),
//                        new Ingredient("butter", 1100, UnitsList.GRAM),
//                        new Ingredient("salt", 110, UnitsList.GRAM)),
//                "put all ingredients together in a pot and cook them well",
//                "images link here too");
//
//        Recipe updatedRecipe = updatedRecipeDto.createNewRecipe(id, createdAt, category);
//
//        when(mockRecipeRepo.save(updatedRecipe)).thenReturn(updatedRecipe);
//
//        //WHEN
//        Recipe actual = testRecipeService.updateRecipeById(id, updatedRecipeDto);
//
//        //THEN
//        verify(mockRecipeRepo).save(updatedRecipe);
//
//        assertEquals(updatedRecipe, actual);
//    }


}