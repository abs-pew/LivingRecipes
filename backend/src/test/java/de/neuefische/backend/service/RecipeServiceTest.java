package de.neuefische.backend.service;


import de.neuefische.backend.dto.RecipeDto;
import de.neuefische.backend.model.Ingredient;
import de.neuefische.backend.model.Recipe;
import de.neuefische.backend.model.UnitsList;
import de.neuefische.backend.repository.RecipeRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RecipeServiceTest {

    @Mock
    private AutoGeneratedValuesService mockAutoGeneratedValuesService;

    @Mock
    private RecipeRepository mockRecipeRepo;

    @InjectMocks
    private RecipeService testRecipeService;

    @Test
    void getAllRecipes_shouldReturnAllRecipes() {
        //GIVEN
        Recipe testRecipe = new Recipe("001", "Butter Chicken", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "images link here",
                LocalDateTime.now(), "VEGAN");
        when(mockRecipeRepo.findAll()).thenReturn(Collections.singletonList(testRecipe));
        //WHEN
        List<Recipe> actual = testRecipeService.getAllRecipes();

        verify(mockRecipeRepo, times(1)).findAll();
        assertEquals(1, actual.size());
        assertEquals(testRecipe, actual.get(0));

    }

    @Test
    void generateRandomId_shouldGenerateRandomIdWithValue_ID001() {
        //GIVEN
        String testId = "ID001";
        when(mockAutoGeneratedValuesService.generateRandomId()).thenReturn(testId);
        //WHEN

        String actual = mockAutoGeneratedValuesService.generateRandomId();
        //THEN
        assertEquals(testId, actual);
    }

    @Test
    void addRecipe_shouldAddANewRecipe() {
        //GIVEN
        RecipeDto inputRecipe = new RecipeDto("Butter Chicken", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "images link here");

//        Recipe recipeToSave = new Recipe("ID001", "Butter Chicken", 45,
//                List.of(
//                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
//                        new Ingredient("butter", 100, UnitsList.GRAM),
//                        new Ingredient("salt", 10, UnitsList.GRAM)),
//                "put all ingredients together in a pot and cook them well",
//                "images link here",
//                LocalDateTime.parse("2025-09-02T00:04:58.697022"), "Regular");

LocalDateTime currentDateTime = LocalDateTime.now();

//        Recipe recipeToSave = inputRecipe.createNewRecipe("ID001",
//                LocalDateTime.parse("2025-09-02T00:04:58.697022"), "Regular");
        Recipe recipeToSave = inputRecipe.createNewRecipe("ID001",
                currentDateTime, "Regular");

        when(mockRecipeRepo.save(recipeToSave)).thenReturn(recipeToSave);
        when(mockAutoGeneratedValuesService.generateRandomId()).thenReturn("ID001");
        when(mockAutoGeneratedValuesService.currentLocalDateTime()).thenReturn(currentDateTime);
        when(mockAutoGeneratedValuesService.getCategory()).thenReturn("Regular");
        //WHEN
        Recipe actual = testRecipeService.addRecipe(inputRecipe);

        //THEN
        verify(mockAutoGeneratedValuesService).generateRandomId();
        verify(mockRecipeRepo, times(1)).save(recipeToSave);
        assertEquals(recipeToSave, actual);
    }
}