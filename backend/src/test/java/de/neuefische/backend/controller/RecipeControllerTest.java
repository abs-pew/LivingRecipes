package de.neuefische.backend.controller;

import de.neuefische.backend.exceptions.RecipeNotFoundException;
import de.neuefische.backend.model.Ingredient;
import de.neuefische.backend.model.Recipe;
import de.neuefische.backend.model.UnitsList;
import de.neuefische.backend.repository.RecipeRepository;
import de.neuefische.backend.service.AutoGeneratedValuesService;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.time.LocalDateTime;
import java.util.List;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;


@SpringBootTest
@AutoConfigureMockMvc
class RecipeControllerTest {

    @Autowired
    MockMvc mockMvc;

    @Autowired
    RecipeRepository mockRecipeRepo;

    @Mock
    private AutoGeneratedValuesService mockAutoGeneratedValuesService;

    @Test
    @DirtiesContext
    void getAllRecipes() throws Exception {
        //GIVEN
        //WHEN
        mockMvc.perform(MockMvcRequestBuilders.get("/api/recipes"))
                //THEN
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType("application/json"))
                .andExpect(MockMvcResultMatchers.content().json("""
                        []
                        """));
    }

    @Test
    @DirtiesContext
    void addRecipe() throws Exception {
        //GIVEN
        //WHEN
        mockMvc.perform(MockMvcRequestBuilders.post("/api/recipes")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("""
                                
                                {
                                    "title": "Daal Chawal",
                                    "cookingTime": 60,
                                    "ingredients": [
                                      {
                                        "name": "rice",
                                        "quantity": 600,
                                        "unit": "GRAM"
                                      },
                                      {
                                        "name": "butter",
                                        "quantity": 100,
                                        "unit": "GRAM"
                                      },
                                      {
                                        "name": "salt",
                                        "quantity": 10,
                                        "unit": "GRAM"
                                      }
                                    ],
                                    "recipeText": "put all ingredients together in a pot and bake them well",
                                    "image": "/images/lentil_soup.jpg"
                                  }
                                """)
                )
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("""
                        {
                            "title": "Daal Chawal",
                            "cookingTime": 60,
                            "ingredients": [
                              {
                                "name": "rice",
                                "quantity": 600,
                                "unit": "GRAM"
                              },
                              {
                                "name": "butter",
                                "quantity": 100,
                                "unit": "GRAM"
                              },
                              {
                                "name": "salt",
                                "quantity": 10,
                                "unit": "GRAM"
                              }
                            ],
                            "recipeText": "put all ingredients together in a pot and bake them well",
                            "image": "/images/lentil_soup.jpg"
                          }
                        """))
                .andExpect(MockMvcResultMatchers.jsonPath("$.id").isNotEmpty())
                .andExpect(MockMvcResultMatchers.jsonPath("$.createdAt").isNotEmpty())
                .andExpect(MockMvcResultMatchers.jsonPath("$.category").isNotEmpty())
        ;

    }

    @Test
    @DirtiesContext
    void getRecipeById() throws Exception {
        //GIVEN
        String id = "ID001";
        LocalDateTime createdAt = LocalDateTime.now();
        String category = "Vegan";

        Recipe existingRecipe = new Recipe(id, "Butter Chicken", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "image link here",
                createdAt, category);

        mockRecipeRepo.save(existingRecipe);

        //WHEN
        mockMvc.perform(get("/api/recipes/" + id))
                //THEN
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(content().json("""
                                    {
                                      "title": "Butter Chicken",
                                      "cookingTime": 45,
                                      "ingredients": [
                                        {
                                          "name": "boneless chicken",
                                          "quantity": 1000,
                                          "unit": "GRAM"
                                        },
                                        {
                                          "name": "butter",
                                          "quantity": 100,
                                          "unit": "GRAM"
                                        },
                                        {
                                          "name": "salt",
                                          "quantity": 10,
                                          "unit": "GRAM"
                                        }
                                      ],
                                      "recipeText": "put all ingredients together in a pot and cook them well",
                                      "image": "image link here"
                                    }
                        """))
                .andExpect(MockMvcResultMatchers.jsonPath("$.id").value(id))
                .andExpect(MockMvcResultMatchers.jsonPath("$.createdAt").isNotEmpty())
                .andExpect(MockMvcResultMatchers.jsonPath("$.category").value(category));
    }

    @Test
    @DirtiesContext
    void getRecipeById_withInvalidId() throws Exception {
        String id = "ID005";
        //GIVEN
        //WHEN
        mockMvc.perform(get("/api/recipes/" + id))
                //THEN
                .andExpect(MockMvcResultMatchers.status().isNotFound());
    }

    @Test
    @DirtiesContext
    void updateRecipeById() throws Exception {
        //GIVEN
        String id = "ID001";
        LocalDateTime createdAt = LocalDateTime.now();
        String category = "Vegan";

        Recipe existingRecipe = new Recipe(id, "Butter Chicken11", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "image link here",
                createdAt, category);

        when(mockAutoGeneratedValuesService.generateRandomId()).thenReturn(id);
        when(mockAutoGeneratedValuesService.currentLocalDateTime()).thenReturn(createdAt);
        when(mockAutoGeneratedValuesService.getCategory()).thenReturn(category);
        mockRecipeRepo.save(existingRecipe);

        //WHEN
        mockMvc.perform(MockMvcRequestBuilders
                        .put("/api/recipes/" + id)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("""
                                            {
                                              "title": "Chicken65",
                                              "cookingTime": 145,
                                              "ingredients": [
                                                {
                                                  "name": "chicken",
                                                  "quantity": 11000,
                                                  "unit": "GRAM"
                                                },
                                                {
                                                  "name": "butter",
                                                  "quantity": 1100,
                                                  "unit": "GRAM"
                                                },
                                                {
                                                  "name": "salt",
                                                  "quantity": 110,
                                                  "unit": "GRAM"
                                                }
                                              ],
                                              "recipeText": "put all ingredients together in a pot, panier them and cook them well",
                                              "image": "image link here for C65"
                                            }
                                """)
                )
                //THEN
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json("""
                                    {
                                      "title": "Chicken65",
                                      "cookingTime": 145,
                                      "ingredients": [
                                        {
                                          "name": "chicken",
                                          "quantity": 11000,
                                          "unit": "GRAM"
                                        },
                                        {
                                          "name": "butter",
                                          "quantity": 1100,
                                          "unit": "GRAM"
                                        },
                                        {
                                          "name": "salt",
                                          "quantity": 110,
                                          "unit": "GRAM"
                                        }
                                      ],
                                      "recipeText": "put all ingredients together in a pot, panier them and cook them well",
                                      "image": "image link here for C65"
                                    }
                        """))
                .andExpect(MockMvcResultMatchers.jsonPath("$.id").value(id))
                .andExpect(MockMvcResultMatchers.jsonPath("$.createdAt").isNotEmpty())
                .andExpect(MockMvcResultMatchers.jsonPath("$.category").value(category));
    }

    @Test
    @DirtiesContext
  void deleteRecipeById_whenCalledWithValidId() throws Exception {

        //GIVEN
        String id = "ID001";
        LocalDateTime createdAt = LocalDateTime.now();
        String category = "Vegan";

        Recipe existingRecipe = new Recipe(id, "Butter Chicken11", 45,
                List.of(
                        new Ingredient("boneless chicken", 1000, UnitsList.GRAM),
                        new Ingredient("butter", 100, UnitsList.GRAM),
                        new Ingredient("salt", 10, UnitsList.GRAM)),
                "put all ingredients together in a pot and cook them well",
                "image link here",
                createdAt, category);
        mockRecipeRepo.save(existingRecipe);

        mockMvc.perform(
                        MockMvcRequestBuilders
                                .delete("/api/recipes/{id}", id))
                .andExpect(MockMvcResultMatchers.status().isOk());

    }

    @Test
    @DirtiesContext
    void deleteRecipeById_whenCalledWithInvalidId() throws Exception {
        String id = "ID005";
        mockMvc.perform(MockMvcRequestBuilders.delete("/api/recipes/{id}", id))
                .andExpect(MockMvcResultMatchers.status().isNotFound());

    }

}